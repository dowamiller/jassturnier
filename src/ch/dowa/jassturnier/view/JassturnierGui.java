/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.dowa.jassturnier.view;

import ch.dowa.jassturnier.control.TurnierController;
import ch.dowa.jassturnier.database.SQLQuerryExecutor;
import ch.dowa.jassturnier.objectModel.Gang;
import ch.dowa.jassturnier.objectModel.Spiel;
import ch.dowa.jassturnier.objectModel.Spieler;
import ch.dowa.jassturnier.objectModel.Turnier;
import ch.dowa.jassturnier.pdf.MappingPDF;
import ch.dowa.jassturnier.pdf.PlayerListPDF;
import ch.dowa.jassturnier.pdf.RankingPDF;
import com.itextpdf.text.DocumentException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dominik
 */
public class JassturnierGui extends javax.swing.JFrame {

    TurnierController controller;
    javax.swing.JTable[] gangTables;

    /**
     * Creates new form JassturnierGui
     */
    public JassturnierGui() {
        initComponents();
        addMouseListener(playerTable, turnierPlayerTable, numberOfTablesLabel, additionalPlayerLable);
        addMouseListener(playerTableChange, turnierPlayerTableChange, numberOfTablesLabelChange, additionalPlayerLableChange);
        gangTables = new JTable[4];
        gangTables[0] = tableGang1;
        gangTables[1] = tableGang2;
        gangTables[2] = tableGang3;
        gangTables[3] = tableGang4;
        tabGang.setEnabledAt(0, false);
        tabGang.setEnabledAt(1, false);
        tabGang.setEnabledAt(2, false);
        tabGang.setEnabledAt(3, false);
        controller = new TurnierController(this);
        for (JTable jT : gangTables) {
            jT.getModel().addTableModelListener(new gangTableModelListener());
        }
        changeNameTable.getModel().addTableModelListener(new changeNameTableModelListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        turnierWizzardDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        yearSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        turnierPlayerTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startTurnier = new javax.swing.JButton();
        addPlayerButton = new javax.swing.JButton();
        numberOfTablesLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        additionalPlayerLable = new javax.swing.JLabel();
        addPlayerDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        preNameTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        turnierOverviewDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        turnierOverviewTable = new javax.swing.JTable();
        newTurnier = new javax.swing.JButton();
        loadTurnier = new javax.swing.JButton();
        deleteTurnier = new javax.swing.JButton();
        changePlayerListDialog = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        playerTableChange = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        turnierPlayerTableChange = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        endChanges = new javax.swing.JButton();
        addPlayerButtonChange = new javax.swing.JButton();
        numberOfTablesLabelChange = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        additionalPlayerLableChange = new javax.swing.JLabel();
        changeNameDialog = new javax.swing.JDialog();
        jScrollPane7 = new javax.swing.JScrollPane();
        changeNameTable = new javax.swing.JTable();
        tabGang = new javax.swing.JTabbedPane();
        scrollGang1 = new javax.swing.JScrollPane();
        tableGang1 = new javax.swing.JTable();
        scrollGang2 = new javax.swing.JScrollPane();
        tableGang2 = new javax.swing.JTable();
        scrollGang3 = new javax.swing.JScrollPane();
        tableGang3 = new javax.swing.JTable();
        scrollGang4 = new javax.swing.JScrollPane();
        tableGang4 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        rankingTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuTournament = new javax.swing.JMenu();
        turnierOverviewItem = new javax.swing.JMenuItem();
        changePlayerListItem = new javax.swing.JMenuItem();
        changeNamesItem = new javax.swing.JMenuItem();
        newRoundItem = new javax.swing.JMenuItem();
        menuPrint = new javax.swing.JMenu();
        exportPlayerItem = new javax.swing.JMenuItem();
        exportRankintItem = new javax.swing.JMenuItem();
        exportPlaceMappingItem = new javax.swing.JMenuItem();

        turnierWizzardDialog.setResizable(false);
        turnierWizzardDialog.setSize(new java.awt.Dimension(700, 800));
        turnierWizzardDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Jahr:");
        jLabel1.setToolTipText("");
        turnierWizzardDialog.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 14, 69, -1));

        jLabel2.setText("Anzahl Tische:");
        turnierWizzardDialog.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        yearSpinner.setModel(new javax.swing.SpinnerNumberModel(2000, 2000, 2025, 1));
        turnierWizzardDialog.getContentPane().add(yearSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 11, 80, -1));

        playerTable.setAutoCreateRowSorter(true);
        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(playerTable);
        if (playerTable.getColumnModel().getColumnCount() > 0) {
            playerTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        turnierWizzardDialog.getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 200, 700));

        jScrollPane3.setName(""); // NOI18N

        turnierPlayerTable.setAutoCreateRowSorter(true);
        turnierPlayerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierPlayerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(turnierPlayerTable);
        if (turnierPlayerTable.getColumnModel().getColumnCount() > 0) {
            turnierPlayerTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        turnierWizzardDialog.getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 200, 700));

        jLabel3.setText("Spieler:");
        turnierWizzardDialog.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));

        jLabel4.setText("Turnierspieler:");
        turnierWizzardDialog.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        startTurnier.setText("Turnier starten");
        startTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTurnierActionPerformed(evt);
            }
        });
        turnierWizzardDialog.getContentPane().add(startTurnier, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 130, -1));

        addPlayerButton.setText("Spieler hinzufügen");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });
        turnierWizzardDialog.getContentPane().add(addPlayerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 130, -1));

        numberOfTablesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberOfTablesLabel.setText("0");
        turnierWizzardDialog.getContentPane().add(numberOfTablesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 80, 20));

        jLabel7.setText("zusätzliche Spieler:");
        turnierWizzardDialog.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        additionalPlayerLable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        additionalPlayerLable.setText("0");
        turnierWizzardDialog.getContentPane().add(additionalPlayerLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 50, 20));

        addPlayerDialog.setResizable(false);
        addPlayerDialog.setSize(new java.awt.Dimension(200, 135));
        addPlayerDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Name:");
        addPlayerDialog.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel6.setText("Vorname:");
        addPlayerDialog.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
        addPlayerDialog.getContentPane().add(preNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 100, -1));
        addPlayerDialog.getContentPane().add(nameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 100, -1));

        addButton.setText("hinzufügen");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addPlayerDialog.getContentPane().add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        turnierOverviewDialog.setResizable(false);
        turnierOverviewDialog.setSize(new java.awt.Dimension(360, 260));
        turnierOverviewDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        turnierOverviewTable.setAutoCreateRowSorter(true);
        turnierOverviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Turnier ID", "Jahr", "Tische"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierOverviewTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(turnierOverviewTable);

        turnierOverviewDialog.getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 220));

        newTurnier.setText("neues Turnier");
        newTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTurnierActionPerformed(evt);
            }
        });
        turnierOverviewDialog.getContentPane().add(newTurnier, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 130, -1));

        loadTurnier.setText("Turnier laden");
        loadTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTurnierActionPerformed(evt);
            }
        });
        turnierOverviewDialog.getContentPane().add(loadTurnier, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 130, -1));

        deleteTurnier.setText("Turnier löschen");
        deleteTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTurnierActionPerformed(evt);
            }
        });
        turnierOverviewDialog.getContentPane().add(deleteTurnier, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 130, -1));

        changePlayerListDialog.setResizable(false);
        changePlayerListDialog.setSize(new java.awt.Dimension(700, 800));
        changePlayerListDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setText("Anzahl Tische:");
        changePlayerListDialog.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        playerTableChange.setAutoCreateRowSorter(true);
        playerTableChange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTableChange.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(playerTableChange);
        if (playerTableChange.getColumnModel().getColumnCount() > 0) {
            playerTableChange.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        changePlayerListDialog.getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 200, 700));

        jScrollPane6.setName(""); // NOI18N

        turnierPlayerTableChange.setAutoCreateRowSorter(true);
        turnierPlayerTableChange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierPlayerTableChange.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(turnierPlayerTableChange);
        if (turnierPlayerTableChange.getColumnModel().getColumnCount() > 0) {
            turnierPlayerTableChange.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        changePlayerListDialog.getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 200, 700));

        jLabel10.setText("Spieler:");
        changePlayerListDialog.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));

        jLabel11.setText("Turnierspieler:");
        changePlayerListDialog.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        endChanges.setText("Bearbeitung beenden");
        endChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endChangesActionPerformed(evt);
            }
        });
        changePlayerListDialog.getContentPane().add(endChanges, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 150, -1));

        addPlayerButtonChange.setText("Spieler hinzufügen");
        addPlayerButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonChangeActionPerformed(evt);
            }
        });
        changePlayerListDialog.getContentPane().add(addPlayerButtonChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 150, -1));

        numberOfTablesLabelChange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberOfTablesLabelChange.setText("0");
        changePlayerListDialog.getContentPane().add(numberOfTablesLabelChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 80, 20));

        jLabel12.setText("zusätzliche Spieler:");
        changePlayerListDialog.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 20));

        additionalPlayerLableChange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        additionalPlayerLableChange.setText("0");
        changePlayerListDialog.getContentPane().add(additionalPlayerLableChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 50, 20));

        changeNameDialog.setResizable(false);
        changeNameDialog.setSize(new java.awt.Dimension(250, 350));
        changeNameDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        changeNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nachname", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        changeNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(changeNameTable);

        changeNameDialog.getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 270, 370));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1000, 800));

        tabGang.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        tableGang1.setAutoCreateRowSorter(true);
        tableGang1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tisch-Nr.", "Team 1", "Team 2", "Punkte Team 1", "Punkte Team 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGang1.getTableHeader().setReorderingAllowed(false);
        scrollGang1.setViewportView(tableGang1);
        if (tableGang1.getColumnModel().getColumnCount() > 0) {
            tableGang1.getColumnModel().getColumn(0).setResizable(false);
            tableGang1.getColumnModel().getColumn(1).setResizable(false);
            tableGang1.getColumnModel().getColumn(2).setResizable(false);
            tableGang1.getColumnModel().getColumn(3).setResizable(false);
            tableGang1.getColumnModel().getColumn(4).setResizable(false);
        }

        tabGang.addTab("Gang 1", scrollGang1);

        tableGang2.setAutoCreateRowSorter(true);
        tableGang2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tisch-Nr.", "Team 1", "Team 2", "Punkte Team 1", "Punkte Team 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGang2.getTableHeader().setReorderingAllowed(false);
        scrollGang2.setViewportView(tableGang2);

        tabGang.addTab("Gang 2", scrollGang2);

        tableGang3.setAutoCreateRowSorter(true);
        tableGang3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tisch-Nr.", "Team 1", "Team 2", "Punkte Team 1", "Punkte Team 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGang3.getTableHeader().setReorderingAllowed(false);
        scrollGang3.setViewportView(tableGang3);

        tabGang.addTab("Gang 3", scrollGang3);

        tableGang4.setAutoCreateRowSorter(true);
        tableGang4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tisch-Nr.", "Team 1", "Team 2", "Punkte Team 1", "Punkte Team 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGang4.getTableHeader().setReorderingAllowed(false);
        scrollGang4.setViewportView(tableGang4);

        tabGang.addTab("Gang 4", scrollGang4);

        rankingTable.setAutoCreateRowSorter(true);
        rankingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rang", "Vorname", "Name", "Punkte"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rankingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(rankingTable);
        if (rankingTable.getColumnModel().getColumnCount() > 0) {
            rankingTable.getColumnModel().getColumn(0).setResizable(false);
            rankingTable.getColumnModel().getColumn(1).setResizable(false);
            rankingTable.getColumnModel().getColumn(2).setResizable(false);
            rankingTable.getColumnModel().getColumn(3).setResizable(false);
        }

        menuTournament.setText("Turnier");

        turnierOverviewItem.setText("Turniere verwalten");
        turnierOverviewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnierOverviewItemActionPerformed(evt);
            }
        });
        menuTournament.add(turnierOverviewItem);

        changePlayerListItem.setText("Spielerliste bearbeiten");
        changePlayerListItem.setEnabled(false);
        changePlayerListItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePlayerListItemActionPerformed(evt);
            }
        });
        menuTournament.add(changePlayerListItem);

        changeNamesItem.setText("Spielernamen bearbeiten");
        changeNamesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNamesItemActionPerformed(evt);
            }
        });
        menuTournament.add(changeNamesItem);

        newRoundItem.setText("neuer Gang starten");
        newRoundItem.setEnabled(false);
        newRoundItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoundItemActionPerformed(evt);
            }
        });
        menuTournament.add(newRoundItem);

        menuBar.add(menuTournament);

        menuPrint.setText("Exportieren");

        exportPlayerItem.setText("Spielerliste exportieren");
        exportPlayerItem.setEnabled(false);
        exportPlayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPlayerItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportPlayerItem);

        exportRankintItem.setText("Rangliste exportieren");
        exportRankintItem.setEnabled(false);
        exportRankintItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRankintItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportRankintItem);

        exportPlaceMappingItem.setText("Platzzuweisung exportieren");
        exportPlaceMappingItem.setEnabled(false);
        exportPlaceMappingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPlaceMappingItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportPlaceMappingItem);

        menuBar.add(menuPrint);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabGang, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabGang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTurnierActionPerformed
        if (Integer.parseInt(additionalPlayerLable.getText()) == 0 && Integer.parseInt(numberOfTablesLabel.getText()) > 0) {
            Turnier t = TurnierController.createAndSaveNewTurnier((int) yearSpinner.getModel().getValue(), Integer.parseInt(numberOfTablesLabel.getText()));
            controller.setActTurnier(t);
            int[] turnierPlayerIDs = new int[turnierPlayerTable.getRowCount()];
            for (int i = 0; i < turnierPlayerTable.getRowCount(); i++) {
                turnierPlayerIDs[i] = (int) turnierPlayerTable.getModel().getValueAt(i, 0);
            }
            controller.addAndSaveTurnierPlayers(turnierPlayerIDs);
            cleanGameTable();
            refreshRankingTable();
            turnierWizzardDialog.setVisible(false);
            exportPlayerItem.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(turnierWizzardDialog, "Es müssen noch weitere Turnierspieler hinzugefügt werden.");
        }
    }//GEN-LAST:event_startTurnierActionPerformed

    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        preNameTextField.setText("");
        nameTextField.setText("");
        addPlayerDialog.setVisible(true);
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int id = SQLQuerryExecutor.getLastIDofTable("spieler") + 1;
        String[] values = {String.valueOf(id), "\"" + preNameTextField.getText() + "\"", "\"" + nameTextField.getText() + "\""};
        SQLQuerryExecutor.addValuesToTable("spieler", values);
        setUpPlayerTableWizzardDialog(false);
        addPlayerDialog.setVisible(false);
    }//GEN-LAST:event_addButtonActionPerformed

    private void exportRankintItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportRankintItemActionPerformed
        int selectedTabID = tabGang.getSelectedIndex();
        Gang selectedGang = controller.getActTurnier().getGaenge().get(selectedTabID);
        if(controller.checkGangFinished(selectedGang)){
          exportRanking(selectedGang.getGangNr());  
        } else {
            JOptionPane.showMessageDialog(this, "Es sind noch nicht alle Spiele des selektierten Ganges gespielt, deshalb kann die Rangliste nicht exportiert werden.");
        }
    }//GEN-LAST:event_exportRankintItemActionPerformed

    private void turnierOverviewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnierOverviewItemActionPerformed
        setUpTurnierOverview();
        turnierOverviewDialog.setVisible(true);
    }//GEN-LAST:event_turnierOverviewItemActionPerformed

    private void newRoundItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoundItemActionPerformed
        if (controller.getActTurnier().numberOfGaenge() >= 4) {
            JOptionPane.showMessageDialog(this, "Das Turnier ist fertig.");
        } else if (controller.getActTurnier().numberOfGaenge() == 0) {
            controller.startAndSaveNewGang();
            exportPlaceMapping(controller.getActTurnier().numberOfGaenge());
            JOptionPane.showMessageDialog(this, "Das Turnier ist gestartet.");
        } else if (controller.checkGangFinished(controller.getActTurnier().getGaenge().get(controller.getActTurnier().numberOfGaenge() - 1))) {
            exportRanking(controller.getActTurnier().numberOfGaenge());
            controller.startAndSaveNewGang();
            exportPlaceMapping(controller.getActTurnier().numberOfGaenge());
        } else {
            JOptionPane.showMessageDialog(this, "Es sind noch nicht alle Spiele des aktuellen Ganges gespielt.");
        }
    }//GEN-LAST:event_newRoundItemActionPerformed

    private void exportPlaceMappingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPlaceMappingItemActionPerformed
        exportPlaceMapping(tabGang.getSelectedIndex() + 1);
    }//GEN-LAST:event_exportPlaceMappingItemActionPerformed

    private void newTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTurnierActionPerformed
        setUpPlayerTableWizzardDialog(true);
        turnierWizzardDialog.setVisible(true);
        turnierOverviewDialog.setVisible(false);
        exportPlayerItem.setEnabled(true);
    }//GEN-LAST:event_newTurnierActionPerformed

    private void loadTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTurnierActionPerformed
        int selectedTurnierID = getSelectedTurnierID();
        if (selectedTurnierID != -1) {
            controller.loadTurnier(selectedTurnierID);
            turnierOverviewDialog.setVisible(false);
            exportPlayerItem.setEnabled(true);
        }
    }//GEN-LAST:event_loadTurnierActionPerformed

    private void deleteTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTurnierActionPerformed
        int selectedTurnierID = getSelectedTurnierID();
        if (selectedTurnierID != -1) {
            if (controller.getActTurnier() == null || selectedTurnierID != controller.getActTurnier().getId()) {
                String[] buttons = {"OK", "Abrechen"};
                int returnValue = JOptionPane.showOptionDialog(turnierOverviewDialog, "Diese Turnier wird unwiderruflich gelöscht", "Warnung",
                        JOptionPane.WARNING_MESSAGE, 0, null, buttons, buttons[0]);
                if (returnValue == 0) {
                    SQLQuerryExecutor.deleteTurnier(selectedTurnierID);
                    setUpTurnierOverview();
                    cleanGameTable();
                }
            } else {
                JOptionPane.showMessageDialog(turnierOverviewDialog, "Das aktuelle Turnier kann nicht gelöscht werden.");
            }
        }
    }//GEN-LAST:event_deleteTurnierActionPerformed

    private void endChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endChangesActionPerformed
        if (Integer.parseInt(additionalPlayerLableChange.getText()) == 0 && Integer.parseInt(numberOfTablesLabelChange.getText()) > 0) {
            int[] turnierPlayerIDs = new int[turnierPlayerTableChange.getRowCount()];
            for (int i = 0; i < turnierPlayerTableChange.getRowCount(); i++) {
                turnierPlayerIDs[i] = (int) turnierPlayerTableChange.getModel().getValueAt(i, 0);
            }
            controller.addAndSaveNewTurnierPlayers(turnierPlayerIDs);
            SQLQuerryExecutor.updateNumbersOfTablesFromTurnier(Integer.parseInt(numberOfTablesLabelChange.getText()), controller.getActTurnier().getId());
            cleanGameTable();
            refreshRankingTable();
            changePlayerListDialog.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(changePlayerListDialog, "Es müssen noch weitere Turnierspieler hinzugefügt werden.");
        }
    }//GEN-LAST:event_endChangesActionPerformed

    private void addPlayerButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonChangeActionPerformed
        preNameTextField.setText("");
        nameTextField.setText("");
        addPlayerDialog.setVisible(true);
    }//GEN-LAST:event_addPlayerButtonChangeActionPerformed

    private void changePlayerListItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePlayerListItemActionPerformed
        setUpPlayerTableChangeDialog();
        changePlayerListDialog.setVisible(true);
    }//GEN-LAST:event_changePlayerListItemActionPerformed

    private void changeNamesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNamesItemActionPerformed
        setUpChangeNameTable();
        changeNameDialog.setVisible(true);
    }//GEN-LAST:event_changeNamesItemActionPerformed

    private void exportPlayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPlayerItemActionPerformed
        ArrayList<String> names = new ArrayList<>();
        String header = "STV-Schenkon Jassturnier " + String.valueOf(controller.getActTurnier().getJahr()) + " Spielerliste";
        String path = "Jassturnier_" + String.valueOf(controller.getActTurnier().getJahr()) + "_Spielerliste.pdf";
        ResultSet result = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
        try {
            while (result.next()) {
                String name = result.getString("Nachname") + " " + result.getString("Vorname");
                names.add(name);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            new PlayerListPDF(names, header).createPdf(path);
            JOptionPane.showMessageDialog(this, "Die Spielerliste wurde exportier.");
        } catch (IOException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Die Spielerliste konnte nicht exportiert werden.");
        } catch (DocumentException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Die Spielerliste konnte nicht exportiert werden.");
        }
    }//GEN-LAST:event_exportPlayerItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JassturnierGui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JButton addPlayerButtonChange;
    private javax.swing.JDialog addPlayerDialog;
    private javax.swing.JLabel additionalPlayerLable;
    private javax.swing.JLabel additionalPlayerLableChange;
    private javax.swing.JDialog changeNameDialog;
    private javax.swing.JTable changeNameTable;
    private javax.swing.JMenuItem changeNamesItem;
    private javax.swing.JDialog changePlayerListDialog;
    private javax.swing.JMenuItem changePlayerListItem;
    private javax.swing.JButton deleteTurnier;
    private javax.swing.JButton endChanges;
    private javax.swing.JMenuItem exportPlaceMappingItem;
    private javax.swing.JMenuItem exportPlayerItem;
    private javax.swing.JMenuItem exportRankintItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton loadTurnier;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuPrint;
    private javax.swing.JMenu menuTournament;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JMenuItem newRoundItem;
    private javax.swing.JButton newTurnier;
    private javax.swing.JLabel numberOfTablesLabel;
    private javax.swing.JLabel numberOfTablesLabelChange;
    private javax.swing.JTable playerTable;
    private javax.swing.JTable playerTableChange;
    private javax.swing.JTextField preNameTextField;
    private javax.swing.JTable rankingTable;
    private javax.swing.JScrollPane scrollGang1;
    private javax.swing.JScrollPane scrollGang2;
    private javax.swing.JScrollPane scrollGang3;
    private javax.swing.JScrollPane scrollGang4;
    private javax.swing.JButton startTurnier;
    private javax.swing.JTabbedPane tabGang;
    private javax.swing.JTable tableGang1;
    private javax.swing.JTable tableGang2;
    private javax.swing.JTable tableGang3;
    private javax.swing.JTable tableGang4;
    private javax.swing.JDialog turnierOverviewDialog;
    private javax.swing.JMenuItem turnierOverviewItem;
    private javax.swing.JTable turnierOverviewTable;
    private javax.swing.JTable turnierPlayerTable;
    private javax.swing.JTable turnierPlayerTableChange;
    private javax.swing.JDialog turnierWizzardDialog;
    private javax.swing.JSpinner yearSpinner;
    // End of variables declaration//GEN-END:variables

    private void setUpPlayerTableWizzardDialog(boolean clean) {
        DefaultTableModel modle = (DefaultTableModel) playerTable.getModel();
        modle.setRowCount(0);
        ResultSet nameSet = SQLQuerryExecutor.getValuesFromTable("spieler");
        Vector row;
        try {
            while (nameSet.next()) {
                row = new Vector();
                row.add(nameSet.getInt("ID"));
                row.add(nameSet.getString("Nachname"));
                row.add(nameSet.getString("Vorname"));
                modle.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clean) {
            modle = (DefaultTableModel) turnierPlayerTable.getModel();
            modle.setRowCount(0);
        }
    }

    private void setUpPlayerTableChangeDialog() {
        DefaultTableModel modle = (DefaultTableModel) playerTableChange.getModel();
        modle.setRowCount(0);
        ResultSet nameSet = SQLQuerryExecutor.getValuesFromTable("spieler");
        Vector row;
        try {
            while (nameSet.next()) {
                row = new Vector();
                row.add(nameSet.getInt("ID"));
                row.add(nameSet.getString("Nachname"));
                row.add(nameSet.getString("Vorname"));
                modle.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        modle = (DefaultTableModel) turnierPlayerTableChange.getModel();
        modle.setRowCount(0);
        for (Spieler s : controller.getActTurnier().getSpieler()) {
            row = new Vector();
            row.add(s.getId());
            row.add(s.getNachname());
            row.add(s.getVorname());
            modle.addRow(row);
        }
    }

    private void addMouseListener(JTable pt, JTable tpt, JLabel ntl, JLabel apl) {
        pt.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    int selectedRow = pt.convertRowIndexToModel(pt.getSelectedRow());
                    int selectedID = (int) pt.getModel().getValueAt(selectedRow, 0);
                    boolean isTurnierPlayer = false;
                    for (int i = 0; i < tpt.getModel().getRowCount(); i++) {
                        isTurnierPlayer = selectedID == (int) tpt.getModel().getValueAt(i, 0);
                        if (isTurnierPlayer) {
                            break;
                        }
                    }
                    if (!isTurnierPlayer) {
                        int nColumns = pt.getModel().getColumnCount();
                        DefaultTableModel turnierPlayerModel = (DefaultTableModel) tpt.getModel();
                        Object[] row = new Object[nColumns];
                        for (int i = 0; i < nColumns; i++) {
                            row[i] = pt.getModel().getValueAt(selectedRow, i);
                        }
                        turnierPlayerModel.addRow(row);
                    }
                }
                int nRows = tpt.getModel().getRowCount();
                ntl.setText(String.valueOf(nRows / 4));
                apl.setText(String.valueOf(nRows % 4));
            }
        });
        tpt.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    int selectedRow = tpt.convertRowIndexToModel(tpt.getSelectedRow());
                    DefaultTableModel turnierPlayerModel = (DefaultTableModel) tpt.getModel();
                    turnierPlayerModel.removeRow(selectedRow);
                }
                int nRows = tpt.getModel().getRowCount();
                ntl.setText(String.valueOf(nRows / 4));
                apl.setText(String.valueOf(nRows % 4));
            }
        });
    }

    public void refreshRankingTable() {
        DefaultTableModel modle = (DefaultTableModel) rankingTable.getModel();
        modle.setRowCount(0);
        if (controller.getActTurnier().getGaenge().isEmpty()) {
            ResultSet result = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
            Vector row;
            int rang = 1;
            try {
                while (result.next()) {
                    row = new Vector();
                    row.add(rang);
                    row.add(result.getString("s.Vorname"));
                    row.add(result.getString("s.Nachname"));
                    row.add(0);
                    modle.addRow(row);
                    rang += 1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            ResultSet result = SQLQuerryExecutor.getRanking(controller.getActTurnier().getId(), controller.getActTurnier().numberOfGaenge());
            Vector row;
            int rang = 1;
            try {
                while (result.next()) {
                    row = new Vector();
                    row.add(rang);
                    row.add(result.getString("Vorname"));
                    row.add(result.getString("Nachname"));
                    row.add(result.getInt("sum(t.Punkte)"));
                    modle.addRow(row);
                    rang += 1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public void cleanGameTable() {
        newRoundItem.setEnabled(true);
        changePlayerListItem.setEnabled(true);
        exportPlaceMappingItem.setEnabled(false);
        exportRankintItem.setEnabled(false);
        exportPlayerItem.setEnabled(false);
        tabGang.setEnabledAt(0, false);
        tabGang.setEnabledAt(1, false);
        tabGang.setEnabledAt(2, false);
        tabGang.setEnabledAt(3, false);
        for (javax.swing.JTable t : gangTables) {
            DefaultTableModel model = (DefaultTableModel) t.getModel();
            model.setRowCount(0);
        }
    }

    public void refreshGameTable(Gang g) {
        changePlayerListItem.setEnabled(false);
        newRoundItem.setEnabled(true);
        exportPlaceMappingItem.setEnabled(true);
        exportRankintItem.setEnabled(true);
        exportPlayerItem.setEnabled(true);
        tabGang.setEnabledAt(g.getGangNr() - 1, true);
        tabGang.setSelectedIndex(g.getGangNr() - 1);
        DefaultTableModel modle = (DefaultTableModel) gangTables[g.getGangNr() - 1].getModel();
        modle.setRowCount(0);
        Vector row;
        for (Spiel s : g.getGames()) {
            row = new Vector();
            row.add(s.getTischNr());
            String team1 = s.getTeam1().getSpieler1().getVorname() + " "
                    + s.getTeam1().getSpieler1().getNachname() + " / "
                    + s.getTeam1().getSpieler2().getVorname() + " "
                    + s.getTeam1().getSpieler2().getNachname();
            row.add(team1);
            String team2 = s.getTeam2().getSpieler1().getVorname() + " "
                    + s.getTeam2().getSpieler1().getNachname() + " / "
                    + s.getTeam2().getSpieler2().getVorname() + " "
                    + s.getTeam2().getSpieler2().getNachname();
            row.add(team2);
            row.add(s.getPunkteTeam1());
            row.add(s.getPunkteTeam2());
            modle.addRow(row);
        }
    }

    private void exportRanking(int gangNr) {
        if (controller.getActTurnier().numberOfPlayers() >= 1) {
            try {
                String header = "STV-Schenkon Jassturnier " + String.valueOf(controller.getActTurnier().getJahr());
                String path = "Jassturnier_";
                ArrayList<String> names = new ArrayList();
                ArrayList<String> points = new ArrayList();
                if (gangNr > 0 && gangNr < 4) {
                    header += " Zwischenrangliste " + String.valueOf(gangNr) + ". Gang";
                    path += String.valueOf(controller.getActTurnier().getJahr()) + "_Zwischenrangliste_Gang" + String.valueOf(gangNr) + ".pdf";
                } else if (gangNr == 4) {
                    header += " Schlussrangliste";
                    path += String.valueOf(controller.getActTurnier().getJahr()) + "_Schlussrangliste.pdf";
                }
                ResultSet result = SQLQuerryExecutor.getRanking(controller.getActTurnier().getId(), gangNr);
                try {
                    while (result.next()) {
                        names.add(result.getString("Vorname") + " " + result.getString("Nachname"));
                        points.add(String.valueOf(result.getInt("sum(t.Punkte)")));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                new RankingPDF(names, points, header).createPdf(path);
                JOptionPane.showMessageDialog(this, "Die Rangliste wurde exportiert.");
            } catch (IOException | DocumentException ex) {
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Die Rangliste konnte nicht exportiert werden.");
            }
        }
    }

    private void setUpTurnierOverview() {
        DefaultTableModel modle = (DefaultTableModel) turnierOverviewTable.getModel();
        modle.setRowCount(0);
        ResultSet nameSet = SQLQuerryExecutor.getValuesFromTable("turnier");
        Vector row;
        try {
            while (nameSet.next()) {
                row = new Vector();
                row.add(nameSet.getInt("ID"));
                row.add(nameSet.getInt("Jahr"));
                row.add(nameSet.getInt("anzahlTische"));
                modle.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setUpChangeNameTable() {
        if (controller.getActTurnier() != null) {
            DefaultTableModel modle = (DefaultTableModel) changeNameTable.getModel();
            modle.setRowCount(0);
            ResultSet nameSet = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
            Vector row;
            try {
                while (nameSet.next()) {
                    row = new Vector();
                    row.add(nameSet.getInt("ID"));
                    row.add(nameSet.getString("Nachname"));
                    row.add(nameSet.getString("Vorname"));
                    modle.addRow(row);
                }
            } catch (SQLException ex) {
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private int getSelectedTurnierID() {
        int rowIndex = turnierOverviewTable.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(turnierOverviewDialog, "Es ist kein Turnier ausgewählt");
            return -1;
        } else {
            return (int) turnierOverviewTable.getModel().getValueAt(rowIndex, 0);
        }
    }

    private void exportPlaceMapping(int gangNr) {
        TurnierController.PlaceMappingType mapping = controller.getPlaceMapping(gangNr-1);
        String header = "STV-Schenkon Jassturnier " + String.valueOf(controller.getActTurnier().getJahr()) + " Platzzuweisung " + String.valueOf(gangNr) + ". Gang";
        String path = "Jassturnier_" + String.valueOf(controller.getActTurnier().getJahr()) + "_Platzzuweisung_Gang" + String.valueOf(gangNr) + ".pdf";
        try {
            new MappingPDF(mapping.getNames(), mapping.getTables(), mapping.getSeats(), header).createPdf(path);
            JOptionPane.showMessageDialog(this, "Die Platzzuweisung wurde exportiert.");
        } catch (IOException | DocumentException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Die Platzzuweisung konnte nicht exportiert werden.");
        }
        
    }

    private class gangTableModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == TableModelEvent.UPDATE) {
                DefaultTableModel model = (DefaultTableModel) gangTables[tabGang.getSelectedIndex()].getModel();
                int newPoints = (int) model.getValueAt(e.getFirstRow(), e.getColumn());
                int newPointsEnemys = 1884 - newPoints;
                if (newPoints >= 0 && newPoints <= 1884) {
                    Vector newRow = new Vector();
                    newRow.add(model.getValueAt(e.getFirstRow(), 0));
                    newRow.add(model.getValueAt(e.getFirstRow(), 1));
                    newRow.add(model.getValueAt(e.getFirstRow(), 2));
                    if (e.getColumn() == 3) {
                        newRow.add(newPoints);
                        newRow.add(newPointsEnemys);
                        controller.updatePointsFromGame(tabGang.getSelectedIndex() + 1, (int) model.getValueAt(e.getFirstRow(), 0), newPoints, newPointsEnemys);
                    } else if (e.getColumn() == 4) {
                        newRow.add(newPointsEnemys);
                        newRow.add(newPoints);
                        controller.updatePointsFromGame(tabGang.getSelectedIndex() + 1, (int) model.getValueAt(e.getFirstRow(), 0), newPointsEnemys, newPoints);
                    } else {
                        newRow.add(model.getValueAt(e.getFirstRow(), 3));
                        newRow.add(model.getValueAt(e.getFirstRow(), 4));
                    }
                    model.removeRow(e.getFirstRow());
                    model.insertRow(e.getFirstRow(), newRow);
                }
            }
        }

    }

    private class changeNameTableModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == TableModelEvent.UPDATE) {
                DefaultTableModel model = (DefaultTableModel) changeNameTable.getModel();
                String newPrename = (String) model.getValueAt(e.getFirstRow(), 2);
                String newName = (String) model.getValueAt(e.getFirstRow(), 1);
                int playerID = (int) model.getValueAt(e.getFirstRow(), 0);
                controller.changeName(playerID, newName, newPrename);
                changeNameDialog.setVisible(false);
            }
        }

    }
}
