/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.dowa.jassturnier.view;

import ch.dowa.jassturnier.ResourceLoader;
import ch.dowa.jassturnier.control.TurnierController;
import ch.dowa.jassturnier.database.SQLQuerryExecutor;
import ch.dowa.jassturnier.objectModel.Gang;
import ch.dowa.jassturnier.objectModel.Spiel;
import ch.dowa.jassturnier.objectModel.Spieler;
import ch.dowa.jassturnier.objectModel.Turnier;
import ch.dowa.jassturnier.pdf.PlaceMappingPdf;
import ch.dowa.jassturnier.pdf.PlayerListPdf;
import ch.dowa.jassturnier.pdf.RankingPdf;
import ch.dowa.jassturnier.pdf.TabelSheetsPdf;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import javax.swing.CellRendererPane;
import javax.swing.ImageIcon;

/**
 *
 * @author Dominik
 */
public class JassturnierGui extends javax.swing.JFrame {

    TurnierController controller;
    BufferedImage image;

    /**
     * Creates new form JassturnierGui
     */
    public JassturnierGui() {
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        turnierOverviewTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    loadTurnier.doClick();
                }
            }
        });
        addMouseListenerPlayerTables(playerTable, turnierPlayerTable, numberOfTablesLabel, additionalPlayerLable);
        addMouseListenerPlayerTables(playerTableChange, turnierPlayerTableChange, numberOfTablesLabelChange, additionalPlayerLableChange);
        controller = new TurnierController(this);

        changeNameTable.getModel().addTableModelListener(new changeNameTableModelListener());
        if(controller.getvLogoPath() != null){
            try {
                image = ImageIO.read(new File(controller.getvLogoPath()));
            } catch (IOException ex) {
                image = null;
            }
        }
        this.getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        turnierWizzardDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        turnierPlayerTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startTurnier = new javax.swing.JButton();
        addPlayerButton = new javax.swing.JButton();
        numberOfTablesLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        additionalPlayerLable = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        turnierTitelTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        anzSpieleSpinner = new javax.swing.JSpinner();
        anzGaengeSpinner = new javax.swing.JSpinner();
        addPlayerDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        preNameTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        turnierOverviewDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        turnierOverviewTable = new javax.swing.JTable();
        newTurnier = new javax.swing.JButton();
        loadTurnier = new javax.swing.JButton();
        deleteTurnier = new javax.swing.JButton();
        changePlayerListDialog = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        playerTableChange = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        turnierPlayerTableChange = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        endChanges = new javax.swing.JButton();
        addPlayerButtonChange = new javax.swing.JButton();
        numberOfTablesLabelChange = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        additionalPlayerLableChange = new javax.swing.JLabel();
        changeNameDialog = new javax.swing.JDialog();
        jScrollPane7 = new javax.swing.JScrollPane();
        changeNameTable = new javax.swing.JTable();
        changePropertiesDialog = new javax.swing.JDialog();
        jLabel8 = new javax.swing.JLabel();
        dbPathTextField = new javax.swing.JTextField();
        searchvLogoPathButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        place1TextField = new javax.swing.JTextField();
        place2TextField = new javax.swing.JTextField();
        place4TextField = new javax.swing.JTextField();
        place3TextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        vNameTextField = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        searchDbPathButton = new javax.swing.JButton();
        vLogoPathTextField = new javax.swing.JTextField();
        vLogoPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        savePropertiesButton = new javax.swing.JButton();
        pathChooser = new javax.swing.JFileChooser();
        tabGang = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        rankingTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuTournament = new javax.swing.JMenu();
        turnierOverviewItem = new javax.swing.JMenuItem();
        closeTurnierItem = new javax.swing.JMenuItem();
        changePlayerListItem = new javax.swing.JMenuItem();
        changeNamesItem = new javax.swing.JMenuItem();
        newRoundItem = new javax.swing.JMenuItem();
        startTurnierItem = new javax.swing.JMenuItem();
        menuPrint = new javax.swing.JMenu();
        exportPlayerItem = new javax.swing.JMenuItem();
        exportRankintItem = new javax.swing.JMenuItem();
        exportPlaceMappingItem = new javax.swing.JMenuItem();
        menuSettings = new javax.swing.JMenu();
        changePropertiesItem = new javax.swing.JMenuItem();

        turnierWizzardDialog.setTitle("Turnier erstellen");
        turnierWizzardDialog.setAlwaysOnTop(true);
        turnierWizzardDialog.setModal(true);
        turnierWizzardDialog.setSize(new java.awt.Dimension(2400, 1200));
        java.awt.GridBagLayout turnierWizzardDialogLayout1 = new java.awt.GridBagLayout();
        turnierWizzardDialogLayout1.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        turnierWizzardDialogLayout1.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        turnierWizzardDialog.getContentPane().setLayout(turnierWizzardDialogLayout1);

        jLabel2.setText("Anzahl Tische:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(jLabel2, gridBagConstraints);

        playerTable.setAutoCreateRowSorter(true);
        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.setRowHeight(30);
        playerTable.setRowMargin(3);
        playerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(playerTable);
        if (playerTable.getColumnModel().getColumnCount() > 0) {
            playerTable.getColumnModel().getColumn(0).setResizable(false);
            playerTable.getColumnModel().getColumn(0).setPreferredWidth(35);
            playerTable.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            playerTable.getColumnModel().getColumn(1).setResizable(false);
            playerTable.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        turnierWizzardDialog.getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane3.setName(""); // NOI18N

        turnierPlayerTable.setAutoCreateRowSorter(true);
        turnierPlayerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierPlayerTable.setRowHeight(30);
        turnierPlayerTable.setRowMargin(3);
        turnierPlayerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(turnierPlayerTable);
        if (turnierPlayerTable.getColumnModel().getColumnCount() > 0) {
            turnierPlayerTable.getColumnModel().getColumn(0).setResizable(false);
            turnierPlayerTable.getColumnModel().getColumn(0).setPreferredWidth(35);
            turnierPlayerTable.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            turnierPlayerTable.getColumnModel().getColumn(1).setResizable(false);
            turnierPlayerTable.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        turnierWizzardDialog.getContentPane().add(jScrollPane3, gridBagConstraints);

        jLabel3.setText("Spieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        turnierWizzardDialog.getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Turnierspieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        turnierWizzardDialog.getContentPane().add(jLabel4, gridBagConstraints);

        startTurnier.setText("Turnier anlegen");
        startTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTurnierActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        turnierWizzardDialog.getContentPane().add(startTurnier, gridBagConstraints);

        addPlayerButton.setText("Spieler hinzufügen");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        turnierWizzardDialog.getContentPane().add(addPlayerButton, gridBagConstraints);

        numberOfTablesLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numberOfTablesLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(numberOfTablesLabel, gridBagConstraints);

        jLabel7.setText("zusätzliche Spieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        turnierWizzardDialog.getContentPane().add(jLabel7, gridBagConstraints);

        additionalPlayerLable.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        additionalPlayerLable.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(additionalPlayerLable, gridBagConstraints);

        jLabel17.setText("Turnier Titel:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        turnierWizzardDialog.getContentPane().add(jLabel17, gridBagConstraints);

        turnierTitelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnierTitelTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        turnierWizzardDialog.getContentPane().add(turnierTitelTextField, gridBagConstraints);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("<->");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        turnierWizzardDialog.getContentPane().add(jLabel18, gridBagConstraints);

        jLabel1.setText("Anzahl Gänge:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(jLabel1, gridBagConstraints);

        jLabel19.setText("Anzahl Spiele:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(jLabel19, gridBagConstraints);

        anzSpieleSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(anzSpieleSpinner, gridBagConstraints);

        anzGaengeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        turnierWizzardDialog.getContentPane().add(anzGaengeSpinner, gridBagConstraints);

        addPlayerDialog.setTitle("Spieler hinzufügen");
        addPlayerDialog.setAlwaysOnTop(true);
        addPlayerDialog.setModal(true);
        addPlayerDialog.setSize(new java.awt.Dimension(400, 200));
        addPlayerDialog.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                addPlayerDialogPropertyChange(evt);
            }
        });
        java.awt.GridBagLayout addPlayerDialogLayout = new java.awt.GridBagLayout();
        addPlayerDialogLayout.columnWidths = new int[] {0, 5, 0};
        addPlayerDialogLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0};
        addPlayerDialog.getContentPane().setLayout(addPlayerDialogLayout);

        jLabel5.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        addPlayerDialog.getContentPane().add(jLabel5, gridBagConstraints);

        jLabel6.setText("Vorname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        addPlayerDialog.getContentPane().add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        addPlayerDialog.getContentPane().add(preNameTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        addPlayerDialog.getContentPane().add(nameTextField, gridBagConstraints);

        addButton.setText("hinzufügen");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        addPlayerDialog.getContentPane().add(addButton, gridBagConstraints);

        turnierOverviewDialog.setTitle("Turnier Übersicht");
        turnierOverviewDialog.setAlwaysOnTop(true);
        turnierOverviewDialog.setModal(true);
        turnierOverviewDialog.setSize(new java.awt.Dimension(2400, 1200));
        java.awt.GridBagLayout turnierOverviewDialogLayout = new java.awt.GridBagLayout();
        turnierOverviewDialogLayout.columnWidths = new int[] {0, 5, 0};
        turnierOverviewDialogLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        turnierOverviewDialog.getContentPane().setLayout(turnierOverviewDialogLayout);

        turnierOverviewTable.setAutoCreateRowSorter(true);
        turnierOverviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Anzahl Gänge", "Anzahl Spiele", "Anzahl Tische"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierOverviewTable.setRowHeight(30);
        turnierOverviewTable.setRowMargin(3);
        turnierOverviewTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(turnierOverviewTable);
        if (turnierOverviewTable.getColumnModel().getColumnCount() > 0) {
            turnierOverviewTable.getColumnModel().getColumn(0).setMinWidth(5);
            turnierOverviewTable.getColumnModel().getColumn(0).setPreferredWidth(35);
            turnierOverviewTable.getColumnModel().getColumn(0).setMaxWidth(35);
            turnierOverviewTable.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            turnierOverviewTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            turnierOverviewTable.getColumnModel().getColumn(2).setMaxWidth(150);
            turnierOverviewTable.getColumnModel().getColumn(3).setMinWidth(5);
            turnierOverviewTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            turnierOverviewTable.getColumnModel().getColumn(3).setMaxWidth(150);
            turnierOverviewTable.getColumnModel().getColumn(4).setPreferredWidth(150);
            turnierOverviewTable.getColumnModel().getColumn(4).setMaxWidth(150);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        turnierOverviewDialog.getContentPane().add(jScrollPane4, gridBagConstraints);

        newTurnier.setText("neues Turnier");
        newTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTurnierActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        turnierOverviewDialog.getContentPane().add(newTurnier, gridBagConstraints);

        loadTurnier.setText("Turnier laden");
        loadTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTurnierActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        turnierOverviewDialog.getContentPane().add(loadTurnier, gridBagConstraints);

        deleteTurnier.setText("Turnier löschen");
        deleteTurnier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTurnierActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        turnierOverviewDialog.getContentPane().add(deleteTurnier, gridBagConstraints);

        changePlayerListDialog.setTitle("Spielerliste ändern");
        changePlayerListDialog.setAlwaysOnTop(true);
        changePlayerListDialog.setModal(true);
        changePlayerListDialog.setSize(new java.awt.Dimension(2400, 1200));
        java.awt.GridBagLayout changePlayerListDialogLayout = new java.awt.GridBagLayout();
        changePlayerListDialogLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        changePlayerListDialogLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        changePlayerListDialog.getContentPane().setLayout(changePlayerListDialogLayout);

        jLabel9.setText("Anzahl Tische:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        changePlayerListDialog.getContentPane().add(jLabel9, gridBagConstraints);

        playerTableChange.setAutoCreateRowSorter(true);
        playerTableChange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTableChange.setRowHeight(30);
        playerTableChange.setRowMargin(3);
        playerTableChange.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(playerTableChange);
        if (playerTableChange.getColumnModel().getColumnCount() > 0) {
            playerTableChange.getColumnModel().getColumn(0).setResizable(false);
            playerTableChange.getColumnModel().getColumn(0).setPreferredWidth(35);
            playerTableChange.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            playerTableChange.getColumnModel().getColumn(1).setResizable(false);
            playerTableChange.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        changePlayerListDialog.getContentPane().add(jScrollPane5, gridBagConstraints);

        jScrollPane6.setName(""); // NOI18N

        turnierPlayerTableChange.setAutoCreateRowSorter(true);
        turnierPlayerTableChange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnierPlayerTableChange.setRowHeight(30);
        turnierPlayerTableChange.setRowMargin(3);
        turnierPlayerTableChange.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(turnierPlayerTableChange);
        if (turnierPlayerTableChange.getColumnModel().getColumnCount() > 0) {
            turnierPlayerTableChange.getColumnModel().getColumn(0).setResizable(false);
            turnierPlayerTableChange.getColumnModel().getColumn(0).setPreferredWidth(35);
            turnierPlayerTableChange.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            turnierPlayerTableChange.getColumnModel().getColumn(1).setResizable(false);
            turnierPlayerTableChange.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        changePlayerListDialog.getContentPane().add(jScrollPane6, gridBagConstraints);

        jLabel10.setText("Spieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        changePlayerListDialog.getContentPane().add(jLabel10, gridBagConstraints);

        jLabel11.setText("Turnierspieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        changePlayerListDialog.getContentPane().add(jLabel11, gridBagConstraints);

        endChanges.setText("Bearbeitung beenden");
        endChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endChangesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePlayerListDialog.getContentPane().add(endChanges, gridBagConstraints);

        addPlayerButtonChange.setText("Spieler hinzufügen");
        addPlayerButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePlayerListDialog.getContentPane().add(addPlayerButtonChange, gridBagConstraints);

        numberOfTablesLabelChange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberOfTablesLabelChange.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        changePlayerListDialog.getContentPane().add(numberOfTablesLabelChange, gridBagConstraints);

        jLabel12.setText("zusätzliche Spieler:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePlayerListDialog.getContentPane().add(jLabel12, gridBagConstraints);

        additionalPlayerLableChange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        additionalPlayerLableChange.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePlayerListDialog.getContentPane().add(additionalPlayerLableChange, gridBagConstraints);

        changeNameDialog.setTitle("Spielernamen ändern");
        changeNameDialog.setAlwaysOnTop(true);
        changeNameDialog.setModal(true);
        changeNameDialog.setSize(new java.awt.Dimension(500, 1000));
        java.awt.GridBagLayout changeNameDialogLayout = new java.awt.GridBagLayout();
        changeNameDialogLayout.columnWidths = new int[] {0};
        changeNameDialogLayout.rowHeights = new int[] {0};
        changeNameDialog.getContentPane().setLayout(changeNameDialogLayout);

        changeNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nachname", "Vorname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        changeNameTable.setRowHeight(30);
        changeNameTable.setRowMargin(3);
        changeNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(changeNameTable);
        if (changeNameTable.getColumnModel().getColumnCount() > 0) {
            changeNameTable.getColumnModel().getColumn(0).setResizable(false);
            changeNameTable.getColumnModel().getColumn(0).setPreferredWidth(35);
            changeNameTable.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            changeNameTable.getColumnModel().getColumn(1).setResizable(false);
            changeNameTable.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        changeNameDialog.getContentPane().add(jScrollPane7, gridBagConstraints);

        changePropertiesDialog.setTitle("Einstellungen ändern");
        changePropertiesDialog.setAlwaysOnTop(true);
        changePropertiesDialog.setMinimumSize(new java.awt.Dimension(800, 1050));
        changePropertiesDialog.setModal(true);
        changePropertiesDialog.setResizable(false);
        changePropertiesDialog.setSize(new java.awt.Dimension(800, 1050));
        java.awt.GridBagLayout changePropertiesDialogLayout = new java.awt.GridBagLayout();
        changePropertiesDialogLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        changePropertiesDialogLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        changePropertiesDialog.getContentPane().setLayout(changePropertiesDialogLayout);

        jLabel8.setText("Speicherpfad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        changePropertiesDialog.getContentPane().add(jLabel8, gridBagConstraints);

        dbPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbPathTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        changePropertiesDialog.getContentPane().add(dbPathTextField, gridBagConstraints);

        searchvLogoPathButton.setText("Pfad wählen");
        searchvLogoPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchvLogoPathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePropertiesDialog.getContentPane().add(searchvLogoPathButton, gridBagConstraints);

        jLabel13.setText("Platzbeschriftung:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePropertiesDialog.getContentPane().add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        changePropertiesDialog.getContentPane().add(jSeparator2, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 500));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        place1TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        place1TextField.setText("jTextField1");
        place1TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place1TextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(place1TextField, gridBagConstraints);

        place2TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        place2TextField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(place2TextField, gridBagConstraints);

        place4TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        place4TextField.setText("jTextField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(place4TextField, gridBagConstraints);

        place3TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        place3TextField.setText("jTextField4");
        place3TextField.setMinimumSize(new java.awt.Dimension(30, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(place3TextField, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel15.setText("Tisch");
        jPanel2.add(jLabel15, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePropertiesDialog.getContentPane().add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        changePropertiesDialog.getContentPane().add(jSeparator3, gridBagConstraints);

        jLabel14.setText("Vereinsname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePropertiesDialog.getContentPane().add(jLabel14, gridBagConstraints);

        vNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vNameTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePropertiesDialog.getContentPane().add(vNameTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        changePropertiesDialog.getContentPane().add(jSeparator4, gridBagConstraints);

        jLabel16.setText("Vereinslogo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        changePropertiesDialog.getContentPane().add(jLabel16, gridBagConstraints);

        searchDbPathButton.setText("Pfad wählen");
        searchDbPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDbPathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        changePropertiesDialog.getContentPane().add(searchDbPathButton, gridBagConstraints);

        vLogoPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vLogoPathTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePropertiesDialog.getContentPane().add(vLogoPathTextField, gridBagConstraints);

        vLogoPanel.setMinimumSize(new java.awt.Dimension(500, 500));
        vLogoPanel.setPreferredSize(new java.awt.Dimension(500, 500));
        vLogoPanel.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanelResized(evt);
            }
        });
        vLogoPanel.setLayout(new java.awt.GridBagLayout());

        imageLabel.setText("kein Logo ausgewählt");
        vLogoPanel.add(imageLabel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        changePropertiesDialog.getContentPane().add(vLogoPanel, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(179, 50));
        jPanel4.setPreferredSize(new java.awt.Dimension(615, 50));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setText("Abbrechen");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel4.add(cancelButton);

        savePropertiesButton.setText("Speichern");
        savePropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropertiesButtonActionPerformed(evt);
            }
        });
        jPanel4.add(savePropertiesButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        changePropertiesDialog.getContentPane().add(jPanel4, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jassturnier");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(2400, 1200));
        setSize(new java.awt.Dimension(856, 446));

        tabGang.setBackground(new java.awt.Color(255, 255, 255));
        tabGang.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        rankingTable.setAutoCreateRowSorter(true);
        rankingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rang", "Vorname", "Name", "Punkte"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rankingTable.setOpaque(false);
        rankingTable.setRowHeight(30);
        rankingTable.setRowMargin(3);
        rankingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(rankingTable);
        if (rankingTable.getColumnModel().getColumnCount() > 0) {
            rankingTable.getColumnModel().getColumn(0).setResizable(false);
            rankingTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            rankingTable.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            rankingTable.getColumnModel().getColumn(1).setResizable(false);
            rankingTable.getColumnModel().getColumn(2).setResizable(false);
            rankingTable.getColumnModel().getColumn(3).setResizable(false);
        }

        menuBar.setBackground(new java.awt.Color(255, 255, 255));

        menuTournament.setText("Turnier");

        turnierOverviewItem.setText("Turniere verwalten");
        turnierOverviewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnierOverviewItemActionPerformed(evt);
            }
        });
        menuTournament.add(turnierOverviewItem);

        closeTurnierItem.setText("aktuelles Turnier schliessen");
        closeTurnierItem.setEnabled(false);
        closeTurnierItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTurnierItemActionPerformed(evt);
            }
        });
        menuTournament.add(closeTurnierItem);

        changePlayerListItem.setText("Spielerliste bearbeiten");
        changePlayerListItem.setEnabled(false);
        changePlayerListItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePlayerListItemActionPerformed(evt);
            }
        });
        menuTournament.add(changePlayerListItem);

        changeNamesItem.setText("Spielernamen bearbeiten");
        changeNamesItem.setEnabled(false);
        changeNamesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNamesItemActionPerformed(evt);
            }
        });
        menuTournament.add(changeNamesItem);

        newRoundItem.setText("neuer Gang starten");
        newRoundItem.setEnabled(false);
        newRoundItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoundItemActionPerformed(evt);
            }
        });
        menuTournament.add(newRoundItem);

        startTurnierItem.setText("Turnier starten");
        startTurnierItem.setEnabled(false);
        startTurnierItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTurnierItemActionPerformed(evt);
            }
        });
        menuTournament.add(startTurnierItem);

        menuBar.add(menuTournament);

        menuPrint.setText("Exportieren");

        exportPlayerItem.setText("Spielerliste exportieren");
        exportPlayerItem.setEnabled(false);
        exportPlayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPlayerItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportPlayerItem);

        exportRankintItem.setText("Rangliste exportieren");
        exportRankintItem.setEnabled(false);
        exportRankintItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRankintItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportRankintItem);

        exportPlaceMappingItem.setText("Platzzuweisung exportieren");
        exportPlaceMappingItem.setEnabled(false);
        exportPlaceMappingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPlaceMappingItemActionPerformed(evt);
            }
        });
        menuPrint.add(exportPlaceMappingItem);

        menuBar.add(menuPrint);

        menuSettings.setText("Einstellungen");

        changePropertiesItem.setText("Einstellungen ändern");
        changePropertiesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePropertiesItemActionPerformed(evt);
            }
        });
        menuSettings.add(changePropertiesItem);

        menuBar.add(menuSettings);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabGang, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabGang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(754, 388));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTurnierActionPerformed
        if (Integer.parseInt(additionalPlayerLable.getText()) == 0 && Integer.parseInt(numberOfTablesLabel.getText()) > 0) {
            Turnier t = TurnierController.createAndSaveNewTurnier(
                turnierTitelTextField.getText(), 
                (int) anzGaengeSpinner.getModel().getValue(),
                (int) anzSpieleSpinner.getModel().getValue(), 
                Integer.parseInt(numberOfTablesLabel.getText())
            );
            controller.setActTurnier(t);
            int[] turnierPlayerIDs = new int[turnierPlayerTable.getRowCount()];
            for (int i = 0; i < turnierPlayerTable.getRowCount(); i++) {
                turnierPlayerIDs[i] = (int) turnierPlayerTable.getModel().getValueAt(i, 0);
            }
            controller.addAndSaveTurnierPlayers(turnierPlayerIDs);
            cleanGameTable();
            refreshRankingTable();
            turnierWizzardDialog.setVisible(false);
            changeNamesItem.setEnabled(true);
            closeTurnierItem.setEnabled(true);
            changePlayerListItem.setEnabled(true);
            changeNamesItem.setEnabled(true);
            newRoundItem.setEnabled(false);
            startTurnierItem.setEnabled(true);
            exportPlayerItem.setEnabled(true);
            exportRankintItem.setEnabled(false);
            exportPlaceMappingItem.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(turnierWizzardDialog, "Es müssen noch weitere Turnierspieler hinzugefügt werden.");
        }
    }//GEN-LAST:event_startTurnierActionPerformed

    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        preNameTextField.setText("");
        nameTextField.setText("");
        Object source = evt.getSource();
        if (evt.getSource() == addPlayerButton){
            turnierOverviewDialog.setAlwaysOnTop(false);
        } else if (evt.getSource() == addPlayerButtonChange){
            changePlayerListDialog.setAlwaysOnTop(false);
        }
        addPlayerDialog.repaint();
        addPlayerDialog.setVisible(true);
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!preNameTextField.getText().isEmpty() && !nameTextField.getText().isEmpty()) {
            int id = SQLQuerryExecutor.getLastIDofTable("spieler") + 1;
            String[] values = {String.valueOf(id), "'" + preNameTextField.getText() + "'", "'" + nameTextField.getText() + "'"};
            SQLQuerryExecutor.addValuesToTable("spieler", values);
            setUpPlayerTableWizzardDialog(false);
            setUpPlayerTableChangeDialog();
            addPlayerDialog.repaint();
            addPlayerDialog.setVisible(false);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void exportRankintItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportRankintItemActionPerformed
        int selectedTabID = tabGang.getSelectedIndex();
        Gang selectedGang = controller.getActTurnier().getGaenge().get(selectedTabID);
        if (controller.checkGangFinished(selectedGang)) {
            exportRanking(selectedGang.getGangNr());
        } else {
            JOptionPane.showMessageDialog(this, "Es sind noch nicht alle Spiele des selektierten Ganges gespielt, deshalb kann die Rangliste nicht exportiert werden.");
        }
    }//GEN-LAST:event_exportRankintItemActionPerformed

    private void turnierOverviewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnierOverviewItemActionPerformed
        setUpTurnierOverview();
        turnierOverviewDialog.repaint();
        turnierOverviewDialog.setVisible(true);
    }//GEN-LAST:event_turnierOverviewItemActionPerformed

    private void newRoundItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoundItemActionPerformed
        if (controller.getActTurnier().getAnzahlGaengeAktuell() >= controller.getActTurnier().getAnzahlGaengeTotal()) {
            JOptionPane.showMessageDialog(this, "Das Turnier ist fertig.");
        } else if (controller.checkGangFinished(controller.getActTurnier().getGaenge().get(controller.getActTurnier().getAnzahlGaengeAktuell() - 1))) {
            exportRanking(controller.getActTurnier().getAnzahlGaengeAktuell());
            addGangTabToGameBoard("Gang " + String.valueOf(controller.getActTurnier().getAnzahlGaengeAktuell() + 1));
            controller.startAndSaveNewGang();
            exportPlaceMapping(controller.getActTurnier().getGaenge().get(controller.getActTurnier().getAnzahlGaengeAktuell() - 1));
            
            changeNamesItem.setEnabled(true);
            closeTurnierItem.setEnabled(true);
            changePlayerListItem.setEnabled(false);
            changeNamesItem.setEnabled(true);
            newRoundItem.setEnabled(true);
            startTurnierItem.setEnabled(false);
            exportPlayerItem.setEnabled(true);
            exportRankintItem.setEnabled(true);
            exportPlaceMappingItem.setEnabled(true);
            
        } else {
            JOptionPane.showMessageDialog(this, "Es sind noch nicht alle Spiele des aktuellen Ganges gespielt.");
        }
    }//GEN-LAST:event_newRoundItemActionPerformed

    private void exportPlaceMappingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPlaceMappingItemActionPerformed
        exportPlaceMapping(controller.getActTurnier().getGaenge().get(tabGang.getSelectedIndex()));
    }//GEN-LAST:event_exportPlaceMappingItemActionPerformed

    private void newTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTurnierActionPerformed
        setUpPlayerTableWizzardDialog(true);
        turnierWizzardDialog.repaint();
        turnierOverviewDialog.setVisible(false);
        turnierWizzardDialog.setVisible(true);
        exportPlayerItem.setEnabled(true);
    }//GEN-LAST:event_newTurnierActionPerformed

    private void loadTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTurnierActionPerformed
        int selectedTurnierID = getSelectedTurnierID();
        cleanGameTable();
        if (selectedTurnierID != -1) {
            controller.loadTurnier(selectedTurnierID);
            setUpGameTables();
            for (Gang g : controller.getActTurnier().getGaenge()) {
                refreshGameTable(g);
            }
            refreshRankingTable();
            turnierOverviewDialog.setVisible(false);
            
            changeNamesItem.setEnabled(true);
            closeTurnierItem.setEnabled(true);
            exportPlayerItem.setEnabled(true);
            
            if(controller.getActTurnier().getAnzahlGaengeAktuell() >= 0){
                changePlayerListItem.setEnabled(true);
                newRoundItem.setEnabled(false);
                startTurnierItem.setEnabled(true);
                exportRankintItem.setEnabled(false);
                exportPlaceMappingItem.setEnabled(false);
            }
            if (controller.getActTurnier().getAnzahlGaengeAktuell() > 0){
                changePlayerListItem.setEnabled(false);
                newRoundItem.setEnabled(true);
                startTurnierItem.setEnabled(false);
                exportPlaceMappingItem.setEnabled(true);
            }
            if (controller.getActTurnier().getAnzahlGaengeAktuell() >= controller.getActTurnier().getAnzahlGaengeTotal()){
                exportRankintItem.setEnabled(true);
            }
        }
    }//GEN-LAST:event_loadTurnierActionPerformed

    private void deleteTurnierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTurnierActionPerformed
        int selectedTurnierID = getSelectedTurnierID();
        if (selectedTurnierID != -1) {
            if (controller.getActTurnier() == null || selectedTurnierID != controller.getActTurnier().getId()) {
                String[] buttons = {"OK", "Abrechen"};
                int returnValue = JOptionPane.showOptionDialog(turnierOverviewDialog, "Diese Turnier wird unwiderruflich gelöscht", "Warnung",
                        JOptionPane.WARNING_MESSAGE, 0, null, buttons, buttons[0]);
                if (returnValue == 0) {
                    SQLQuerryExecutor.deleteTurnier(selectedTurnierID);
                    setUpTurnierOverview();
                    cleanGameTable();
                }
            } else {
                JOptionPane.showMessageDialog(turnierOverviewDialog, "Das aktuelle Turnier kann nicht gelöscht werden.");
            }
        }
    }//GEN-LAST:event_deleteTurnierActionPerformed

    private void endChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endChangesActionPerformed
        if (Integer.parseInt(additionalPlayerLableChange.getText()) == 0 && Integer.parseInt(numberOfTablesLabelChange.getText()) > 0) {
            int[] turnierPlayerIDs = new int[turnierPlayerTableChange.getRowCount()];
            for (int i = 0; i < turnierPlayerTableChange.getRowCount(); i++) {
                turnierPlayerIDs[i] = (int) turnierPlayerTableChange.getModel().getValueAt(i, 0);
            }
            controller.addAndSaveNewTurnierPlayers(turnierPlayerIDs);
            SQLQuerryExecutor.updateNumbersOfTablesFromTurnier(Integer.parseInt(numberOfTablesLabelChange.getText()), controller.getActTurnier().getId());
            controller.getActTurnier().setAnzahlTische(Integer.parseInt(numberOfTablesLabelChange.getText()));
            cleanGameTable();
            refreshRankingTable();
            changePlayerListDialog.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(changePlayerListDialog, "Es müssen noch weitere Turnierspieler hinzugefügt werden.");
        }
    }//GEN-LAST:event_endChangesActionPerformed

    private void changePlayerListItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePlayerListItemActionPerformed
        setUpPlayerTableChangeDialog();
        changePlayerListDialog.repaint();
        changePlayerListDialog.setVisible(true);
    }//GEN-LAST:event_changePlayerListItemActionPerformed

    private void changeNamesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNamesItemActionPerformed
        setUpChangeNameTable();
        changeNameDialog.repaint();
        changeNameDialog.setVisible(true);
    }//GEN-LAST:event_changeNamesItemActionPerformed

    private void exportPlayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPlayerItemActionPerformed

    ArrayList<String> names = new ArrayList<>();
    ArrayList<Map<String, Object>> result = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
    for (Map m : result) {
        String name = (String) m.get("NACHNAME") + " " + (String) m.get("VORNAME");
        names.add(name);
    }
    try {
        PlayerListPdf.exportPlayerList(names,controller.getActTurnier().getTurnierTitel());
        JOptionPane.showMessageDialog(this, "Die Spielerliste wurde exportier.");
    } catch (IOException ex) {
        Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Die Spielerliste konnte nicht exportiert werden.");
    }

    }//GEN-LAST:event_exportPlayerItemActionPerformed

    private void dbPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbPathTextFieldActionPerformed

    private void vNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vNameTextFieldActionPerformed

    private void changePropertiesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePropertiesItemActionPerformed
        setUpPropertiesDialog();
        changePropertiesDialog.repaint();
        changePropertiesDialog.setVisible(true);
    }//GEN-LAST:event_changePropertiesItemActionPerformed

    private void savePropertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropertiesButtonActionPerformed
        Properties props = ResourceLoader.readProperties();
        String newDbPath = dbPathTextField.getText();
        if (!props.getProperty("DBPATH").equals(newDbPath)) {
            try {
                controller.changeDbPath(newDbPath);
            } catch (Exception ex) {
                changePropertiesDialog.setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(this, ex.getMessage());
                changePropertiesDialog.setAlwaysOnTop(true);
                dbPathTextField.setText(props.getProperty("DBPATH"));
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        props.setProperty("DBPATH", newDbPath);
        props.setProperty("PLACE4", place4TextField.getText());
        props.setProperty("PLACE3", place3TextField.getText());
        props.setProperty("PLACE2", place2TextField.getText());
        props.setProperty("PLACE1", place1TextField.getText());
        props.setProperty("VNAME", vNameTextField.getText());
        props.setProperty("LOGOPATH", image != null ? vLogoPathTextField.getText() : "");
        ResourceLoader.writeProperties(props);
        controller.setvLogoPath(image != null ? vLogoPathTextField.getText() : null);
        controller.setvName(!vNameTextField.getText().isEmpty() ? vNameTextField.getText() : null);
        changePropertiesDialog.setVisible(false);
    }//GEN-LAST:event_savePropertiesButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        changePropertiesDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void place1TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_place1TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_place1TextFieldActionPerformed

    private void searchDbPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDbPathButtonActionPerformed
        changePropertiesDialog.setAlwaysOnTop(false);
        pathChooser.setDialogTitle("Datenbankpfad auswählen");
        pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (pathChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            dbPathTextField.setText(pathChooser.getSelectedFile().getPath());
        }
        changePropertiesDialog.setAlwaysOnTop(true);


    }//GEN-LAST:event_searchDbPathButtonActionPerformed

    private void closeTurnierItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTurnierItemActionPerformed
        controller.setActTurnier(null);
        changeNamesItem.setEnabled(false);
        closeTurnierItem.setEnabled(false);
        changePlayerListItem.setEnabled(false);
        changeNamesItem.setEnabled(false);
        newRoundItem.setEnabled(false);
        startTurnierItem.setEnabled(false);
        exportPlayerItem.setEnabled(false);
        exportRankintItem.setEnabled(false);
        exportPlaceMappingItem.setEnabled(false);
        cleanGameTable();
        refreshRankingTable();
        tabGang.removeAll();
    }//GEN-LAST:event_closeTurnierItemActionPerformed

    private void searchvLogoPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchvLogoPathButtonActionPerformed
        changePropertiesDialog.setAlwaysOnTop(false);
        pathChooser.setDialogTitle("Vereinslogo auswählen");
        pathChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        pathChooser.addChoosableFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));
        pathChooser.setAcceptAllFileFilterUsed(false);
        if (pathChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            vLogoPathTextField.setText(pathChooser.getSelectedFile().getPath());
            vLogoPathTextField.postActionEvent();
        }
        pathChooser.setAcceptAllFileFilterUsed(true);
        pathChooser.resetChoosableFileFilters();
        changePropertiesDialog.setAlwaysOnTop(true);
    }//GEN-LAST:event_searchvLogoPathButtonActionPerformed

    private void jPanelResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanelResized
       //imageLabel.setSize(vLogoPanel.getSize());
    }//GEN-LAST:event_jPanelResized

    private void vLogoPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vLogoPathTextFieldActionPerformed
       System.out.println();
            try {
                image = ImageIO.read(new File(evt.getActionCommand()));
            } catch (IOException ex) {
                image = null;
            }
            showLogoInChangePropertiesDialog();
    }//GEN-LAST:event_vLogoPathTextFieldActionPerformed

    private void addPlayerDialogPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_addPlayerDialogPropertyChange
        System.out.println(evt);
    }//GEN-LAST:event_addPlayerDialogPropertyChange

    private void turnierTitelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnierTitelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turnierTitelTextFieldActionPerformed

    private void startTurnierItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTurnierItemActionPerformed
        if (controller.getActTurnier().getAnzahlGaengeAktuell() == 0) {
            addGangTabToGameBoard("Gang " + String.valueOf(controller.getActTurnier().getAnzahlGaengeAktuell() + 1));
            controller.startAndSaveNewGang();
            exportPlaceMapping(controller.getActTurnier().getGaenge().get(0));
            JOptionPane.showMessageDialog(this, "Das Turnier ist gestartet.");
            
            changeNamesItem.setEnabled(true);
            closeTurnierItem.setEnabled(true);
            changePlayerListItem.setEnabled(false);
            changeNamesItem.setEnabled(true);
            newRoundItem.setEnabled(true);
            startTurnierItem.setEnabled(false);
            exportPlayerItem.setEnabled(true);
            exportRankintItem.setEnabled(false);
            exportPlaceMappingItem.setEnabled(true);   
        } 
    }//GEN-LAST:event_startTurnierItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JassturnierGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JassturnierGui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JButton addPlayerButtonChange;
    private javax.swing.JDialog addPlayerDialog;
    private javax.swing.JLabel additionalPlayerLable;
    private javax.swing.JLabel additionalPlayerLableChange;
    private javax.swing.JSpinner anzGaengeSpinner;
    private javax.swing.JSpinner anzSpieleSpinner;
    private javax.swing.JButton cancelButton;
    private javax.swing.JDialog changeNameDialog;
    private javax.swing.JTable changeNameTable;
    private javax.swing.JMenuItem changeNamesItem;
    private javax.swing.JDialog changePlayerListDialog;
    private javax.swing.JMenuItem changePlayerListItem;
    private javax.swing.JDialog changePropertiesDialog;
    private javax.swing.JMenuItem changePropertiesItem;
    private javax.swing.JMenuItem closeTurnierItem;
    private javax.swing.JTextField dbPathTextField;
    private javax.swing.JButton deleteTurnier;
    private javax.swing.JButton endChanges;
    private javax.swing.JMenuItem exportPlaceMappingItem;
    private javax.swing.JMenuItem exportPlayerItem;
    private javax.swing.JMenuItem exportRankintItem;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton loadTurnier;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuPrint;
    private javax.swing.JMenu menuSettings;
    private javax.swing.JMenu menuTournament;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JMenuItem newRoundItem;
    private javax.swing.JButton newTurnier;
    private javax.swing.JLabel numberOfTablesLabel;
    private javax.swing.JLabel numberOfTablesLabelChange;
    private javax.swing.JFileChooser pathChooser;
    private javax.swing.JTextField place1TextField;
    private javax.swing.JTextField place2TextField;
    private javax.swing.JTextField place3TextField;
    private javax.swing.JTextField place4TextField;
    private javax.swing.JTable playerTable;
    private javax.swing.JTable playerTableChange;
    private javax.swing.JTextField preNameTextField;
    private javax.swing.JTable rankingTable;
    private javax.swing.JButton savePropertiesButton;
    private javax.swing.JButton searchDbPathButton;
    private javax.swing.JButton searchvLogoPathButton;
    private javax.swing.JButton startTurnier;
    private javax.swing.JMenuItem startTurnierItem;
    private javax.swing.JTabbedPane tabGang;
    private javax.swing.JDialog turnierOverviewDialog;
    private javax.swing.JMenuItem turnierOverviewItem;
    private javax.swing.JTable turnierOverviewTable;
    private javax.swing.JTable turnierPlayerTable;
    private javax.swing.JTable turnierPlayerTableChange;
    private javax.swing.JTextField turnierTitelTextField;
    private javax.swing.JDialog turnierWizzardDialog;
    private javax.swing.JPanel vLogoPanel;
    private javax.swing.JTextField vLogoPathTextField;
    private javax.swing.JTextField vNameTextField;
    // End of variables declaration//GEN-END:variables

    private void setUpPlayerTableWizzardDialog(boolean clean) {
        DefaultTableModel modlePlayerTable = (DefaultTableModel) playerTable.getModel();
        modlePlayerTable.setRowCount(0);
        ArrayList<Map<String, Object>> nameSet = SQLQuerryExecutor.getValuesFromTable("spieler");
        Vector row;
        for (Map m : nameSet) {
            row = new Vector();
            row.add((Integer) m.get("ID"));
            row.add((String) m.get("NACHNAME"));
            row.add((String) m.get("VORNAME"));
            modlePlayerTable.addRow(row);
        }
        if (clean) {
            modlePlayerTable = (DefaultTableModel) turnierPlayerTable.getModel();
            modlePlayerTable.setRowCount(0);
        }
    }

    private TableCellRenderer getCellRenderer(int horizontalAlignment) {
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(horizontalAlignment);
        return leftRenderer;
    }

    private void setUpPlayerTableChangeDialog() {
        DefaultTableModel modleTurnierPlayerTable = (DefaultTableModel) playerTableChange.getModel();
        modleTurnierPlayerTable.setRowCount(0);
        ArrayList<Map<String, Object>> nameSet = SQLQuerryExecutor.getValuesFromTable("spieler");
        Vector row;
        for (Map m : nameSet) {
            row = new Vector();
            row.add((Integer) m.get("ID"));
            row.add((String) m.get("NACHNAME"));
            row.add((String) m.get("VORNAME"));
            modleTurnierPlayerTable.addRow(row);
        }
        modleTurnierPlayerTable = (DefaultTableModel) turnierPlayerTableChange.getModel();
        modleTurnierPlayerTable.setRowCount(0);
        if (controller.getActTurnier() != null) {
            for (Spieler s : controller.getActTurnier().getSpieler()) {
                row = new Vector();
                row.add(s.getId());
                row.add(s.getNachname());
                row.add(s.getVorname());
                modleTurnierPlayerTable.addRow(row);
            }
        }
        int nRows = modleTurnierPlayerTable.getRowCount();
        numberOfTablesLabelChange.setText(String.valueOf(nRows / 4));
        additionalPlayerLableChange.setText(String.valueOf(nRows % 4));
    }

    private void addMouseListenerPlayerTables(JTable pt, JTable tpt, JLabel ntl, JLabel apl) {
        pt.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    int selectedRow = pt.convertRowIndexToModel(pt.getSelectedRow());
                    int selectedID = (int) pt.getModel().getValueAt(selectedRow, 0);
                    boolean isTurnierPlayer = false;
                    for (int i = 0; i < tpt.getModel().getRowCount(); i++) {
                        isTurnierPlayer = selectedID == (int) tpt.getModel().getValueAt(i, 0);
                        if (isTurnierPlayer) {
                            break;
                        }
                    }
                    if (!isTurnierPlayer) {
                        int nColumns = pt.getModel().getColumnCount();
                        DefaultTableModel turnierPlayerModel = (DefaultTableModel) tpt.getModel();
                        Object[] row = new Object[nColumns];
                        for (int i = 0; i < nColumns; i++) {
                            row[i] = pt.getModel().getValueAt(selectedRow, i);
                        }
                        turnierPlayerModel.addRow(row);
                    }
                }
                int nRows = tpt.getModel().getRowCount();
                ntl.setText(String.valueOf(nRows / 4));
                apl.setText(String.valueOf(nRows % 4));
            }
        });
        tpt.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    int selectedRow = tpt.convertRowIndexToModel(tpt.getSelectedRow());
                    DefaultTableModel turnierPlayerModel = (DefaultTableModel) tpt.getModel();
                    turnierPlayerModel.removeRow(selectedRow);
                }
                int nRows = tpt.getModel().getRowCount();
                ntl.setText(String.valueOf(nRows / 4));
                apl.setText(String.valueOf(nRows % 4));
            }
        });
    }

    public void refreshRankingTable() {
        DefaultTableModel modle = (DefaultTableModel) rankingTable.getModel();
        modle.setRowCount(0);
        if (controller.getActTurnier() != null) {
            if (controller.getActTurnier().getGaenge().isEmpty()) {
                ArrayList<Map<String, Object>> result = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
                Vector row;
                int rang = 1;
                for (Map m : result) {
                    row = new Vector();
                    row.add(rang);
                    row.add((String) m.get("VORNAME"));
                    row.add((String) m.get("NACHNAME"));
                    row.add(0);
                    modle.addRow(row);
                    rang += 1;
                }
            } else {
                ArrayList<Map<String, Object>> result = SQLQuerryExecutor.getRanking(controller.getActTurnier().getId(), controller.getActTurnier().getAnzahlGaengeAktuell(),false);
                Vector row;
                int rang = 1;
                for (Map m : result) {
                    row = new Vector();
                    row.add(rang);
                    row.add((String) m.get("VORNAME"));
                    row.add((String) m.get("NACHNAME"));
                    row.add((Long) m.get("SUM(T.PUNKTE)"));
                    modle.addRow(row);
                    rang += 1;
                }
            }
        }
    }

    public void cleanGameTable() {
        javax.swing.JTable[] gangTables;
        
        
        
        gangTables = getGangTables();
        
        for (javax.swing.JTable t : gangTables) {
            DefaultTableModel model = (DefaultTableModel) t.getModel();
            model.setRowCount(0);
        }
    }

    private javax.swing.JTable[] getGangTables(){
        Component[] components = tabGang.getComponents();
        ArrayList<javax.swing.JTable> gangTables = new ArrayList<>();
        for (Component comp : components){
            if (comp.getClass() == javax.swing.JScrollPane.class) {
                javax.swing.JViewport viewport = ((javax.swing.JScrollPane)comp).getViewport(); 
                gangTables.add((JTable)viewport.getView());
            }
        }
        javax.swing.JTable[] gangTablesArray = new javax.swing.JTable[gangTables.size()];
        return gangTables.toArray(gangTablesArray);
    }     
    
    public void refreshGameTable(Gang g) {
        javax.swing.JTable[] gangTables;
        gangTables = getGangTables();
        tabGang.setEnabledAt(g.getGangNr() - 1, true);
        tabGang.setSelectedIndex(g.getGangNr() - 1);
        DefaultTableModel modle = (DefaultTableModel) gangTables[g.getGangNr() - 1].getModel();
        modle.setRowCount(0);
        Vector row;
        for (Spiel s : g.getGames()) {
            row = new Vector();
            row.add(s.getTischNr());
            String team1 = s.getTeam1().getSpieler1().getVorname() + " "
                    + s.getTeam1().getSpieler1().getNachname() + " / "
                    + s.getTeam1().getSpieler2().getVorname() + " "
                    + s.getTeam1().getSpieler2().getNachname();
            row.add(team1);
            String team2 = s.getTeam2().getSpieler1().getVorname() + " "
                    + s.getTeam2().getSpieler1().getNachname() + " / "
                    + s.getTeam2().getSpieler2().getVorname() + " "
                    + s.getTeam2().getSpieler2().getNachname();
            row.add(team2);
            row.add(s.getPunkteTeam1());
            row.add(s.getPunkteTeam2());
            modle.addRow(row);
        }
    }

    private void exportRanking(int gangNr) {
        ArrayList<Long> pointList;
        HashMap<Integer, ArrayList<Long>> points = new HashMap<>();
        HashMap<Integer, String> names = new HashMap<>();
        for (int gangIndex = 1; gangIndex <= gangNr; gangIndex++) {
            ArrayList<Map<String, Object>> result = SQLQuerryExecutor.getRanking(controller.getActTurnier().getId(), gangIndex, true);
            for (int i = 0; i < result.size(); i++) {
                Map<String, Object> m = result.get(i);
                if (gangIndex == 1){
                    names.put(i, (String) m.get("VORNAME") + " " + (String) m.get("NACHNAME"));
                    pointList = new ArrayList<>();
                    pointList.add((Long) m.get("SUM(T.PUNKTE)"));
                    points.put(i, pointList);
                } else {
                    pointList = points.get(i);
                    pointList.add((Long) m.get("SUM(T.PUNKTE)"));
                    points.put(i, pointList);
                }
            }
        }
        if (controller.getActTurnier().numberOfPlayers() >= 1) {
            try {
                RankingPdf.exportRanking(names, points, gangNr, controller.getActTurnier().getTurnierTitel(), controller.getActTurnier().getAnzahlGaengeTotal() == controller.getActTurnier().getAnzahlGaengeAktuell());
                JOptionPane.showMessageDialog(this, "Die Rangliste wurde exportiert.");
            } catch (IOException ex) {
                Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Die Rangliste konnte nicht exportiert werden.");
            }
        }
    }

    private void setUpTurnierOverview() {
        DefaultTableModel modle = (DefaultTableModel) turnierOverviewTable.getModel();
        modle.setRowCount(0);
        ArrayList<Map<String, Object>> nameSet = SQLQuerryExecutor.getValuesFromTable("turnier");
        Vector row;
        for (Map m : nameSet) {
            row = new Vector();
            row.add((Integer) m.get("ID"));
            row.add((String) m.get("TURNIERTITEL"));
            row.add((Integer) m.get("ANZAHLGAENGE"));
            row.add((Integer) m.get("ANZAHLSPIELE"));
            row.add((Integer) m.get("ANZAHLTISCHE"));
            modle.addRow(row);
        }
    }

    private void setUpChangeNameTable() {
        if (controller.getActTurnier() != null) {
            DefaultTableModel modle = (DefaultTableModel) changeNameTable.getModel();
            modle.setRowCount(0);
            ArrayList<Map<String, Object>> nameSet = SQLQuerryExecutor.getAlphabeticalTurnierplayerList(controller.getActTurnier().getId());
            Vector row;
            for (Map m : nameSet) {
                row = new Vector();
                row.add((Integer) m.get("ID"));
                row.add((String) m.get("NACHNAME"));
                row.add((String) m.get("VORNAME"));
                modle.addRow(row);
            }
        }
    }

    private int getSelectedTurnierID() {
        int rowIndex = turnierOverviewTable.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(turnierOverviewDialog, "Es ist kein Turnier ausgewählt");
            return -1;
        } else {
            return (int) turnierOverviewTable.getModel().getValueAt(rowIndex, 0);
        }
    }
    
    private void showLogoInChangePropertiesDialog() {
        if (image != null) {
            imageLabel.setText(null);
            int maxSize = 500;
            int h = image.getHeight();
            int w = image.getWidth();
            int nh = (h >= w) ? maxSize :  (int)(((float) h / (float) w) * maxSize);
            int nw = (h<=w) ? maxSize :  (int)(((float) w / (float) h) * maxSize);
            ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(nw, nh, Image.SCALE_DEFAULT));
            imageLabel.setIcon(imageIcon);
        } else {
            imageLabel.setIcon(null);
            imageLabel.setText("Kein Logo ausgewählt.");
        }
        
    }

    private void exportPlaceMapping(Gang gang) {
        TurnierController.PlaceMappingType mapping = controller.getPlaceMapping(gang.getGangNr() - 1);
        try {
            PlaceMappingPdf.exportPlaceMapping(mapping, gang.getGangNr(), controller.getActTurnier().getTurnierTitel());
            TabelSheetsPdf.exportTabelSheets(gang, controller.getActTurnier().getTurnierTitel());
            JOptionPane.showMessageDialog(this, "Die Platzzuweisung wurde exportiert.");
        } catch (IOException ex) {
            Logger.getLogger(JassturnierGui.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Die Platzzuweisung konnte nicht exportiert werden.");
        }
        
    }

    private void setUpPropertiesDialog() {
        dbPathTextField.setText(ResourceLoader.readProperty("DBPATH"));
        place1TextField.setText(ResourceLoader.readProperty("PLACE1"));
        place2TextField.setText(ResourceLoader.readProperty("PLACE2"));
        place3TextField.setText(ResourceLoader.readProperty("PLACE3"));
        place4TextField.setText(ResourceLoader.readProperty("PLACE4"));
        vLogoPathTextField.setText(ResourceLoader.readProperty("LOGOPATH"));
        showLogoInChangePropertiesDialog();
    }

    private void setUpGameTables() {
        tabGang.removeAll();
        for (int i = 0; i < controller.getActTurnier().getGaenge().size(); i++) {
            addGangTabToGameBoard("Gang " + String.valueOf(i + 1));
        }
    }

    private void addGangTabToGameBoard(String tabName) {
        javax.swing.JScrollPane scrollGang = new javax.swing.JScrollPane();
        javax.swing.JTable tableGang = new javax.swing.JTable();
        
        tableGang.setAutoCreateRowSorter(true);
        
        tableGang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tisch-Nr.", "Team 1", "Team 2", "Punkte Team 1", "Punkte Team 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        
        tableGang.setRowHeight(30);
        tableGang.setRowMargin(3);
        tableGang.getTableHeader().setReorderingAllowed(false);
        
        if (tableGang.getColumnModel().getColumnCount() > 0) {
            tableGang.getColumnModel().getColumn(0).setResizable(false);
            tableGang.getColumnModel().getColumn(0).setPreferredWidth(35);
            tableGang.getColumnModel().getColumn(0).setCellRenderer(getCellRenderer(JLabel.LEFT));
            tableGang.getColumnModel().getColumn(1).setResizable(false);
            tableGang.getColumnModel().getColumn(2).setResizable(false);
            tableGang.getColumnModel().getColumn(3).setResizable(false);
            tableGang.getColumnModel().getColumn(4).setResizable(false);
        }
        
        tableGang.getModel().addTableModelListener(new gangTableModelListener());
        
        scrollGang.setViewportView(tableGang);
        tabGang.addTab(tabName, scrollGang);
    }
    
    private class gangTableModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == TableModelEvent.UPDATE) {
                javax.swing.JTable[] gangTables;
                gangTables = getGangTables();
                DefaultTableModel model = (DefaultTableModel) gangTables[tabGang.getSelectedIndex()].getModel();
                int newPoints = (int) model.getValueAt(e.getFirstRow(), e.getColumn());
                int newPointsEnemys = (controller.getActTurnier().getAnzahlSpiele() * 157) - newPoints;
                if (newPoints >= 0 && newPoints <= (controller.getActTurnier().getAnzahlSpiele() * 157)) {
                    Vector newRow = new Vector();
                    newRow.add(model.getValueAt(e.getFirstRow(), 0));
                    newRow.add(model.getValueAt(e.getFirstRow(), 1));
                    newRow.add(model.getValueAt(e.getFirstRow(), 2));
                    if (e.getColumn() == 3) {
                        newRow.add(newPoints);
                        newRow.add(newPointsEnemys);
                        controller.updatePointsFromGame(tabGang.getSelectedIndex() + 1, (int) model.getValueAt(e.getFirstRow(), 0), newPoints, newPointsEnemys);
                    } else if (e.getColumn() == 4) {
                        newRow.add(newPointsEnemys);
                        newRow.add(newPoints);
                        controller.updatePointsFromGame(tabGang.getSelectedIndex() + 1, (int) model.getValueAt(e.getFirstRow(), 0), newPointsEnemys, newPoints);
                    } else {
                        newRow.add(model.getValueAt(e.getFirstRow(), 3));
                        newRow.add(model.getValueAt(e.getFirstRow(), 4));
                    }
                    model.removeRow(e.getFirstRow());
                    model.insertRow(e.getFirstRow(), newRow);
                }
            }
        }

    }

    private class changeNameTableModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == TableModelEvent.UPDATE) {
                DefaultTableModel model = (DefaultTableModel) changeNameTable.getModel();
                String newPrename = (String) model.getValueAt(e.getFirstRow(), 2);
                String newName = (String) model.getValueAt(e.getFirstRow(), 1);
                int playerID = (int) model.getValueAt(e.getFirstRow(), 0);
                controller.changeName(playerID, newName, newPrename);
                changeNameDialog.setVisible(false);
            }
        }

    }
}
